name: Test Rerun
on:
  issue_comment:
    types: [created]

env:
  RERUN_COMMENT_TEXT: test rerun
  BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
jobs:
  verify-jobs:
    name: Test reruns
    runs-on: ubuntu-latest
#     if:
#       ${{
#         github.event_name == 'issue_comment' && github.event.issue.pull_request &&
#         startsWith(github.event.comment.body, env.RERUN_COMMENT_TEXT)
#       }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Get PR data
        id: pr-data
        env:
          PR_API_URL: ${{ github.event.issue.pull_request.url }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |  
            const { data: pr } = await github.request(process.env.PR_API_URL);

            if (pr && pr.state === 'open') {
             core.setOutput('sha', pr.head.sha);
             core.setOutput('ref', pr.head.ref);
            } else {
             core.setFailed(`Active PR not found ${process.env.PR_API_URL}`);
            }
      - name: Create pending status in the PR
        uses: actions/github-script@v5
        env:
          COMMENT_SHA: ${{ steps.pr-data.outputs.sha }}
          COMMENT_CONTEXT: "${{ github.workflow }} / ${{ github.event.comment.body }}"
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.COMMENT_SHA,
              state: 'pending',
              target_url: process.env.BUILD_URL,
              description: 'Command started',
              context: process.env.COMMENT_CONTEXT,
            });
      - name: Get jobs to rerun
        id: validate-command-params
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const SUPPORTED_JOBS = [
                'something'
              ]
              
            const command = process.env.RERUN_COMMENT_TEXT
            const comment = process.env.COMMENT_BODY
            
            const commandParams = comment.replace(command, "").trim().split(" ");
            const paramsValidationObject = commandParams
              .reduce(
                (prev, param) =>
                  SUPPORTED_JOBS.includes(param)
                    ? { ...prev, ...prev.valid.push(param) }
                    : { ...prev, ...prev.inValid.push(param) },
                { valid: [], inValid: [] }
              );
              
            core.setOutput('valid', paramsValidationObject.valid.join(", "));
            core.setOutput('invalid', paramsValidationObject.inValid.join(", "));
            
      - name: Run tests
        id: test-runs
        env:
          JOBS_TO_RERUN: ${{ steps.validate-command-params.outputs.valid }}
          SHA: ${{ steps.pr-data.outputs.sha }}
          BRANCH: ${{ steps.pr-data.outputs.ref }}
        run: |
          IFS=', ' read -a arr <<< $JOBS_TO_RERUN
          for i in "${arr[@]}"
          do
            echo "$i" "$SHA" "$BRANCH"
          done

      - name: Notify on reruns 
        if: ${steps.test-runs.outputs.status == 'success'}
        env:
          JOBS_TO_RERUN: ${{ steps.validate-command-params.outputs.valid }}
          INVALID_PARAMS: ${{ steps.validate-command-params.outputs.invalid }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobsToRerun = process.env.JOBS_TO_RERUN
            const invalidParams = process.env.INVALID_PARAMS
            
            const rerunningMessage = `Rerunning jobs: ${jobsToRerun} 🏃`;
            const invalidParamsMessage = `${
              jobsToRerun && "\n"
            } Something feels off about: ${invalidParams}. Maybe check the spelling? 🙈`;

            const messageBody = `${jobsToRerun && rerunningMessage} ${
              invalidParams && invalidParamsMessage
            }`;
            
            await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: messageBody,
                  });
                  
      - name: Create result status in the PR
        env:
          COMMENT_SHA: ${{ steps.pr-data.outputs.sha }}
          COMMENT_CONTEXT: "${{ github.workflow }} / ${{ github.event.comment.body }}"
          STATE: ${{ steps.test-runs.outputs.status }}
        uses: actions/github-script@v5
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.COMMENT_SHA,
              state: process.env.STATE,
              target_url: process.env.BUILD_URL,
              description: process.env.STATE === 'success' ? 'Command finished' : 'Command failed',
              context: process.env.COMMENT_CONTEXT,
            });


