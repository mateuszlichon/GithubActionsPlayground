name: Wait for CI

on:
  workflow_run:
    workflows: 
      - CI
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Awaits
        run: |
          echo Hooray,
          echo I waited.
          
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Runs script
        env: 
          EVENT_WORKFLOW_SHA: ${{ github.event.workflow_run.head_sha }}
          EVENT_WORKFLOW_BRANCH: ${{ github.event.workflow_run.head_branch }}
          EVENT_WORKFLOW_ID: ${{ github.event.workflow.id }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('tra la la')
            
            const workflowsToConfirmMap = {
              15644088: 'CI name TEST',
            }
            
            async function fetchWorkflowStatus(workflowId) {
              console.log('FETCHING RUN')
              const {data} = await github.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                branch: '${{ env.EVENT_WORKFLOW_BRANCH }}',
              })
              

              const runsOnSameSha = data.workflow_runs.filter((run) => run.head_sha === '${{ env.EVENT_WORKFLOW_SHA }}')
              
              const sortedRuns = runsOnSameSha.sort((a, b) => b.run_number - a.run_number)
              
              return sortedRuns[0].conclusion
            }
                        
            async function getWorkflowStatus(workflowId) {
              console.log(`Checking ${workflowsToConfirmMap[workflowId]} status`)
              console.log('EVENT_WORKFLOW_BRANCH', '${{ env.EVENT_WORKFLOW_BRANCH }}')
              let workflowStatus
              console.log('checking if same run', workflowId === '${{ env.EVENT_WORKFLOW_BRANCH }}')
              if (workflowId === '${{ env.EVENT_WORKFLOW_BRANCH }}') {
                console.log('GETTING SAME RUN')
                workflowStatus = github.event.workflow_run.conclusion
              } else {
                workflowStatus = await fetchWorkflowStatus(workflowId)
              }
              console.log(`${workflowsToConfirmMap[workflowId]} status is ${workflowStatus}`)
              return workflowStatus
            }
            
            async function isAllWorkflowsSuccess(workflowsIdsArray) {
              workflowsIdsArray.reduce(async (prev, next) => prev && (await getWorkflowStatus(next) === 'success'), true)
            }
            
            const allWorkflowsStatus = await isAllWorkflowsSuccess(Object.keys(workflowsToConfirmMap))
            
            console.log('allWorkflowsStatusSuccess', allWorkflowsStatus)
            
            
