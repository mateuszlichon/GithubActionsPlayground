name: Wait for CI

on:
  workflow_run:
    workflows: 
      - CI
      - 'CI dispatch'
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Awaits
        run: |
          echo Hooray,
          echo I waited.
          
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Runs script
        env: 
          EVENT_WORKFLOW_SHA: ${{ github.event.workflow_run.head_sha }}
          EVENT_WORKFLOW_BRANCH: ${{ github.event.workflow_run.head_branch }}
          EVENT_WORKFLOW_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowsToConfirmMap = {
              'ci.yml': 'CI',
              'dispatch.yml': 'CI dispatch',
            }
            
            async function fetchWorkflowConclusion(workflowId) {
              const {data} = await github.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                branch: '${{ env.EVENT_WORKFLOW_BRANCH }}',
              })
              const runsOnSameSha = data.workflow_runs.filter((run) => run.head_sha === '${{ env.EVENT_WORKFLOW_SHA }}') || []
              // TODO switch to the one above
              // const runsOnSameSha = data.workflow_runs.filter((run) => true) || []
              const sortedRuns = runsOnSameSha.sort((a, b) => b.run_number - a.run_number)
              const workflowStatus = sortedRuns[0] ? {status: sortedRuns[0].status, conclusion: sortedRuns[0].conclusion} : {}

              return workflowStatus
            }

            async function getWorkflowConclusion(workflowId) {
              const workflowStatus = workflowsToConfirmMap[workflowId] === '${{ env.EVENT_WORKFLOW_NAME }}' ? {conclusion: '${{ env.EVENT_WORKFLOW_CONCLUSION }}'} : await fetchWorkflowConclusion(workflowId)
              return workflowStatus;
            }

            async function getRequiredWorkflowsConclusions(workflowsIdsArray) {
              const conclusionsArray = workflowsIdsArray.map(
                async (workflowId) => {
                  return {[workflowId]: await getWorkflowConclusion(workflowId)}
                }
              );
              return await (await Promise.all(conclusionsArray)).reduce((prev, next) => {return {...prev, ...next}}, {});
            }

            const workflowIds = Object.keys(workflowsToConfirmMap);
            const requiredWorkflowsConclusions = await getRequiredWorkflowsConclusions(
              workflowIds
            );

            const isAllWorkflowsSuccess = Object.values(
              requiredWorkflowsConclusions
            ).reduce((prev, next) => prev && next.conclusion === "success", true);

            if (isAllWorkflowsSuccess) {
              console.log("All workflows successful");
              console.log("Moving on to check if master...");
            } else {
              console.log("Not all workflows ready:");
              workflowIds.forEach((workflowId) => {
                if (!requiredWorkflowsConclusions[workflowId].status) {
                  console.log(
                    `No ${workflowsToConfirmMap[workflowId]} workflow matching criteria of branch and SHA`
                  );
                } else if (requiredWorkflowsConclusions[workflowId].conclusion !== "success") {
                  console.log(
                    `${workflowsToConfirmMap[workflowId]} status is ${requiredWorkflowsConclusions[workflowId].status} with a conclusion of ${requiredWorkflowsConclusions[workflowId].conclusion}`
                  );
                }
              });
            }
            
            
