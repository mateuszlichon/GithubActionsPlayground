name: 'Waiting for workflows'
description: 'Checking status and conclusions of awaited workflows'
inputs:
  branch:
    description: 'Branch on which we check the workflow'
    required: true
  sha:
    description: 'SHA on which we check the workflow'
    required: true
  workflowsIds:
    description: 'Ids of workflows to check if successful'
    required: true
outputs:
  wait-result:
    description: "Random number"
    value: ${{ steps.wait-outcome.outputs.result }}
runs:
  using: "composite"
  steps:
      - name: Check if all necesary workflows are successful
        id: wait-outcome
        env:
          WORKFLOW_SHA: ${{ inputs.sha }}
          WORKFLOW_BRANCH: ${{ inputs.branch }}
          WORKFLOWS_IDS: ${{ inputs.workflowsIds }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            
            const workflowIds = '${{ env.WORKFLOWS_IDS }}'.split(', ')
            
            const requiredWorkflowsConclusions = await getRequiredWorkflowsConclusions(
              workflowIds
            );
            
            const isAllWorkflowsSuccess = Object.values(
              requiredWorkflowsConclusions
            ).reduce((prev, next) => prev && next.conclusion === "success", true);
            if (isAllWorkflowsSuccess) {
              core.info('Tra la la')
              console.log("All workflows successful");
              console.log("Moving on to check if master... ");
              return 'success'
            } else {
              console.log("Not all workflows ready:");
              workflowIds.forEach((workflowId) => {
                if (!requiredWorkflowsConclusions[workflowId].status) {
                  core.info('Output to the actions build log')
                  console.log(
                    `No workflow with id ${workflowId} matching criteria of branch and SHA`
                  );
                } else if (requiredWorkflowsConclusions[workflowId].conclusion !== "success") {
                  console.log(
                    `${requiredWorkflowsConclusions[workflowId].name} status is ${requiredWorkflowsConclusions[workflowId].status} with a conclusion of ${requiredWorkflowsConclusions[workflowId].conclusion}`
                  );
                }
              });
              return 'not success'
            }
            
            ///// Functions implementation
            
            async function fetchWorkflowConclusion(workflowId) {
              
              const {data} = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                branch: '${{ env.EVENT_WORKFLOW_BRANCH }}',
              })
              
              // const runsOnSameSha = data.workflow_runs.filter((run) => run.head_sha === '${{ env.EVENT_WORKFLOW_SHA }}') || []
              const runsOnSameSha = data.workflow_runs.filter((run) => true) || []
              const sortedRuns = runsOnSameSha.sort((a, b) => b.run_number - a.run_number)
              const workflowStatus = sortedRuns[0] ? {status: sortedRuns[0].status, conclusion: sortedRuns[0].conclusion, name: sortedRuns[0].name} : {}
              return workflowStatus
            }
            async function getRequiredWorkflowsConclusions(workflowsIdsArray) {
              const conclusionsArray = workflowsIdsArray.map(
                async (workflowId) => {
                  return {[workflowId]: await fetchWorkflowConclusion(workflowId)}
                }
              );
              return await (await Promise.all(conclusionsArray)).reduce((prev, next) => {return {...prev, ...next}}, {});
            }
            
      - name: Get result
        shell: bash
        run: echo "${{steps.wait-outcome.outputs.result}}"
